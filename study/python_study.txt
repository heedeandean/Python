파이썬

객체지향 언어(자바와는 다르게 클래스를 포함해서 사용하는 모든 것을 객체로 다룸)
고급프로그래밍 언어
인터프리터 언어
동적 타이핑 대화형 언어 
coroutine[코루틴] 지원 > Subroutine[서브루틴]
유니코드 제공 : 한글, 한자 사용 가능

현재 2/3버전 대로 나누어서 개발 중 (Why? 호환이 안되서)
하지만 언젠가는 3.x버전으로 옮겨야 함

4줄 들여쓰기 권장


장점(+)
1. 코드의 단순성과 표준성
2. 이식성
- 모든 os 환경에 연동, 다른 언어와 연동
- 플랫폼이 독립적 : 다양한 플랫폼에서 동작
3. 객체 지향 언어
4. 확장 가능한 라이브러리

단점(-)
GIL(Global Interpreter Lock) : CPython(C로 구현)의 인터프리터에서 동시에 
			오직 하나의 스레드만 동작하도록 허용함으로써 생기는 문제 
- 다중 스레드(Multi-Thread)의 성능이 떨어짐
  그래서 다중 프로세스(Multi-Process) 사용 권장
  다중 프로세싱 패키지를 제공해 스레드 이용하는 것과 비슷하게 구현하도록 지원중
  But, 다중 스레드보다 복잡한 문제 발생

---------------------------------------
◆ 구조
모듈(Module) : .py
패키지(Package) : 모듈들을 포함하는 하나의 디렉토리(directory)

◆  PVM(Python Virtual Machine) : CPU에 의해 직접 실행되는 C, C++보다 느림

◆ 파이썬의 내장함수(Built-in Functions)
- 쉘에서 dir()함수 입력시 내장함수 확인 가능
- 특별하게 선언하지 않고 어디서든 호출 가능

◆ 식별자
1. A-Z, a-z or 언더스코어(_)로 시작
2. @, $, % 사용 X
3. 대소문자 구분
4. 변수, 자료형, 서브루틴 등을 가리키는 토큰임
5. 단일 언더스코어(_)로 시작하는 식별자는 private라는 의미
6. 두개 언더스코어(__)로 시작하는 식별자는 강한 프라이빗(strong private)라는 의미
7. 두개 언더스코어(__)로 끝나는 식별자는 언어에 의해 정의된 특별한 이름을 의미

◆ 키워드 = 예약어

◆ 자료형
- Numbers
1. int (정수) 
2. float(실수)
3. complex(복소수)

◆ divmod(a, b) -> a/b 나눈 (몫, 나머지)

◆ 문자열 함수 종류
- swapcase() : 대문자 -> 소문자 / 소문자 -> 대문자
- title() : 모든 단어의 첫 문자만 대문자로 나머지는 소문자로 바꾼다.
- capitalize() : 문자열의 첫 글자만 대문자로 나머지는 소문자로 바꾼다.
- islower() : 모든 문자가 소문자이면 True 반환
- isupper() : 모든 문자가 대문자이면 True 반환
- lstrip() : 좌측 공백을 지운다.
- rstrip() : 우측 공백을 지운다.
- strip() : 양쪽 공백을 지운다.
- replace(str1, str2) : str1을 str2로 바꾼다.
- split() : 공백 문자를 기준으로 나누어서 리스트에 저장한다.
- split(sep) : sep를 시준으로 나누어서 리스트에 저장한다.
- isalnum() : 모든 문자가 알파벳 혹은 숫자면 True 반환
- isalpha() : 모든 문자가 알파벳이면 True 반환

◆ Tuples
- 수정 X
- () 사용

◆ List
- 수정 O
- [] 사용
- list.extend(seq) : list에 seq를 추가
- list.insert(index, obj) : index위치에 obj를 삽입
- list.pop(obj-list-1) : list의 마지막에 있는 원소를 리턴
- list.reverse() : list를 역순으로 재배치

◆ Dictionary(딕셔너리)
- {} 사용
- 대소문자 구분
- 정렬 X
- key : 변경 X / value : 변경 O
- key를 호출하면 value를 리턴하는 구조를 가짐
- key는 유일한 값
- keys() : key들을 모아놓은 리스트를 리턴
- values()
- items()
- clear() : 모든 내용을 삭제
- get(key) : key의 value를 반환
- has_key(key) 해당하는 key가 있는지 조사하여 참, 거짓으로 반환


- del ~ : 삭제

◆ Set
- {} 사용
- 중복 X
- 순서 O
- 집합연산을 통해 자료를 추출하고 싶을때 사용

◆ 제어문자(Escape sequence)
- \t : tab

◆ print(value, sep=' ', end='\n', file=sys.stdout, flush=False)
매개 인자
- sep : 디폴트로 연속적인 값을 하나의 공백으로 구분
         또 다른 키워드 인수를 사용하여 다른 구분 문자열 지정
- file : 대상 지정하여 출력 장치 변경할 수 있음
- flush : 출력 버퍼 삭제 기능

◆ 포맷팅
- %d or %i : 10진수
- %o : 8진수
- %x or %X : 16진수
- %e or %E : 소문자
- %r : 문자열(repr()의 결과 값)
- %s : 문자열(str()의 결과 값)
- %% : %를 출력

◆ 포맷터 정렬
< : 왼쪽 정렬
> : 오른쪽 정렬
^ : 가운데 정렬

◆ re 모듈
- re.search() : 대상 문자열 전체 검색
- re.match() : 대상 문자열의 시작부터 검색
- re.sub(매칭할 패턴, 변경할 문자열, 검색 대상 문자열)

◆ if~: elif~: else:

◆ range(시작값, 종료값, 증감분)

◆ 파라미터 : (a, *tuple, **dic) -> 순서 지켜야 함

◆ lambda : 익명함수(이름이 없는 함수)

◆ scoping rule 
- LGB 규칙 
변수 우선순위 : Local(지역) > Global(전역) > Built-in(내장)

◆ 클래스
- 모든 함수의 첫 인자가 self 키워드로 선언한다.
- private : 관습적으로 더블 언더스코어(__)로 시작하는 이름은
	  non-public으로 취급

- 1. __init__ : 생성자(Constructor), 인스턴스가 만들어질 때 호출 (초기화(initialization)의 줄임말)
	    매개인자O
  2. __del__ : 소멸자(Destructor), 인스턴스가 사라질 때 호출 
	    매개인자X
	    (ex. 오픈된 작업파일의 클로즈, 데이터베이스 연결 종료) 

◆ Overriding(오버라이딩) : 메소드 재정의

◆ 상속(Inheritance) : 자식 클래스는 부모 클래스로부터 멤버변수와 메소드를 상속 받지만,
		   생성자는 상속 받을 수 없다. 

◆ 파이썬에서 "다중상속"받을 때 부모들이 같은 메소드를 가지고 있을 때 먼저 정의된 쪽 호출
	    
◆ 수학 함수 모듈
1. Math 모듈 
- abs(x) : x의 절댓값

◆ Raise : 원하는 에러를 강제로 발생 시킴


★★★★★틀린문제 다시풀기★★★★★
[1]
1. 오늘 날짜와 시간을 출력한다.
2. 오늘부터 100일 후의 날짜를 년도/월/일로 출력한다.


[2] (num1/num2)의 결과를 구할 때 num2가 0이 아닌 정수만 입력 받고, 
그렇지 않으면 Exception을 처리하는 사용자 MyException을 만들어 보세요. 






답
[1]
import datetime

1. today = datetime.datetime.today()
print(today)
2. afterday = today + datetime.timedelta(days=100)
print(afterday.strftime("%Y/%m/%d"))

[2]
class MyException(Exception):
    def __init__(self, message):
        self.message = message

try:
    num1, num2 = eval(input("input num1, num2 : "))
    if num2 == 0:
        raise MyException("0으로 나누려 했음")
    result = num1 / num2
    print("Result is", result)
except MyException as e:
    print(e.message)